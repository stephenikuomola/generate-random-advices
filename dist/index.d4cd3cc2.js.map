{"mappings":"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","sources":["<anon>","src/advice.js"],"sourcesContent":["(function () {\nvar $2364cb84e6b6548c$exports = {};\n/**\n * The function initializes the application by selecting the elements from the DOM.\n * @returns {void}\n */ function $2364cb84e6b6548c$var$App() {\n    // Get the canvas element from the DOM\n    const element = /**@type {HTMLCanvasElement | null}*/ document.querySelector('canvas');\n    // Get the button element from the DOM\n    const btn = /**@type {HTMLButtonElement | null} */ document.querySelector('button');\n    const adviceContainer = /**@type {HTMLDivElement | null}*/ document.querySelector('.advice-container');\n    //The constants used in the Zdog library\n    // These constants are used to define the number of faces on the dice\n    const FOUR = 4;\n    window.addEventListener('DOMContentLoaded', $2364cb84e6b6548c$var$fetchAdvice.bind(null, element, btn, adviceContainer));\n    $2364cb84e6b6548c$var$diceLoader(element, FOUR);\n    // When the button is clicked, it will generate a new piece of advice\n    btn?.addEventListener('click', $2364cb84e6b6548c$var$fetchAdvice.bind(null, element, btn, adviceContainer));\n}\n/**\n * The function initializes the Zdog dice loader with a canvas and a constant.\n * It sets up the Zdog illustration, anchor, group, and shapes to create a\n * 3D dice animation.\n * @param {HTMLCanvasElement | null} canvas - The canvas element where the Zdog illustration will be rendered.\n * @param {number} constant - A constant value used to define the number of faces on the dice.\n * @returns {void}\n */ function $2364cb84e6b6548c$var$diceLoader(canvas, constant) {\n    const { Anchor: Anchor, Ellipse: Ellipse, Group: Group, Illustration: Illustration, Rect: Rect, TAU: TAU } = Zdog;\n    const illustration = new Illustration({\n        element: canvas\n    });\n    // anchor point used for the rotation\n    const dice = new Anchor({\n        addTo: illustration\n    });\n    // group describing the faces through rounded rectangles\n    const faces = new Group({\n        addTo: dice\n    });\n    // due to the considerable stroke, it is possible to fake the dice using four faces only\n    const face = new Rect({\n        addTo: faces,\n        color: 'hsl(150, 100%, 66%)',\n        height: 50,\n        stroke: 50,\n        translate: {\n            z: -25\n        },\n        width: 50\n    });\n    // rotate the faces around the center\n    face.copy({\n        rotate: {\n            x: TAU / constant\n        },\n        translate: {\n            y: 25\n        }\n    });\n    face.copy({\n        rotate: {\n            x: TAU / constant\n        },\n        translate: {\n            y: -25\n        }\n    });\n    face.copy({\n        translate: {\n            z: 25\n        }\n    });\n    // include the dots repeating as many shapes/groups as possible\n    // ! when copying an element be sure to reset the rotation/translation of the copied shape\n    const one = new Ellipse({\n        addTo: dice,\n        color: 'hsl(219, 22%, 16%)',\n        diameter: 15,\n        fill: true,\n        stroke: false,\n        translate: {\n            z: 50\n        }\n    });\n    const two = new Group({\n        addTo: dice,\n        rotate: {\n            x: TAU / constant\n        },\n        translate: {\n            y: 50\n        }\n    });\n    one.copy({\n        addTo: two,\n        translate: {\n            y: 20\n        }\n    });\n    one.copy({\n        addTo: two,\n        translate: {\n            y: -20\n        }\n    });\n    const three = new Group({\n        addTo: dice,\n        rotate: {\n            y: TAU / constant\n        },\n        translate: {\n            x: 50\n        }\n    });\n    one.copy({\n        addTo: three,\n        translate: {\n            z: 0\n        }\n    });\n    one.copy({\n        addTo: three,\n        translate: {\n            x: 20,\n            y: -20,\n            z: 0\n        }\n    });\n    one.copy({\n        addTo: three,\n        translate: {\n            x: -20,\n            y: 20,\n            z: 0\n        }\n    });\n    const four = new Group({\n        addTo: dice,\n        rotate: {\n            y: TAU / constant\n        },\n        translate: {\n            x: -50\n        }\n    });\n    two.copyGraph({\n        addTo: four,\n        rotate: {\n            x: 0\n        },\n        translate: {\n            x: 20,\n            y: 0\n        }\n    });\n    two.copyGraph({\n        addTo: four,\n        rotate: {\n            x: 0\n        },\n        translate: {\n            x: -20,\n            y: 0\n        }\n    });\n    const five = new Group({\n        addTo: dice,\n        rotate: {\n            x: TAU / constant\n        },\n        translate: {\n            y: -50\n        }\n    });\n    four.copyGraph({\n        addTo: five,\n        rotate: {\n            y: 0\n        },\n        translate: {\n            x: 0\n        }\n    });\n    one.copy({\n        addTo: five,\n        translate: {\n            z: 0\n        }\n    });\n    const six = new Group({\n        addTo: dice,\n        translate: {\n            z: -50\n        }\n    });\n    two.copyGraph({\n        addTo: six,\n        rotate: {\n            x: 0,\n            z: TAU / constant\n        },\n        translate: {\n            x: 0,\n            y: 0\n        }\n    });\n    four.copyGraph({\n        addTo: six,\n        rotate: {\n            y: 0\n        },\n        translate: {\n            x: 0\n        }\n    });\n    /**\n   * This function animates the dice by updating the render graph and rotating the dice on its x and y axes.\n   * It uses requestAnimationFrame to create a smooth animation loop.\n   * @returns {void}\n   */ function animate() {\n        illustration.updateRenderGraph();\n        dice.rotate.x += 0.01;\n        dice.rotate.y -= 0.01;\n        requestAnimationFrame(animate);\n    }\n    animate();\n}\n/**\n * This function fetches advice from an API and updates the advice container with the new advice.\n * It also disables the button to prevent multiple clicks while the advice is being fetched.\n * @param {HTMLCanvasElement | null} element - The canvas element where the Zdog\n * @param {HTMLButtonElement | null} btn - The button element that triggers the advice fetch.\n * @param {HTMLDivElement | null} adviceContainer - The container where the advice will be displayed.\n * @returns {Promise<void>}\n */ async function $2364cb84e6b6548c$var$fetchAdvice(element, btn, adviceContainer) {\n    if (adviceContainer && btn) {\n        adviceContainer.innerHTML = ``;\n        btn.disabled = true; // Disable the button while fetching advice\n    }\n    element?.classList.remove('hidden'); // Show the canvas\n    try {\n        const response = await fetch('https://api.adviceslip.com/advice');\n        if (!response.ok) throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n        const data = await response.json();\n        const advice = data.slip.advice;\n        const adviceId = data.slip.id;\n        // Update the advice container with the new advice\n        if (adviceContainer) adviceContainer.innerHTML = `\n        <h1 class=\"advice-id\">Advice #<span id=\"advice-id\">${adviceId}</span></h1>\n        <p class=\"advice-text\">\"${advice}\"</p>\n      `;\n        $2364cb84e6b6548c$var$refresh(btn, element); // Refresh the Zdog illustration to reflect the new advice\n    // Hide the canvas after advice is fetched\n    } catch (error) {\n        console.error('Error fetching advice:', error);\n        if (adviceContainer) adviceContainer.innerHTML = `\n        <h1 class=\"advice-id\">Advance #<span id=\"advice-id\">\\u{1F635}</span></h1>\n        <p class=\"advice-text\">\"Check Your Internet Connection\"</p>\n      `;\n        $2364cb84e6b6548c$var$refresh(btn, element); // Refresh the Zdog illustration to reflect the error state\n    }\n}\n/**\n * The function refreshes the button state and hides the canvas element after advice is fetched.\n * @param {HTMLButtonElement | null} btn - The button element that triggers the advice fetch.\n * @param {HTMLCanvasElement | null} element - The canvas element where the Zdog illustration is rendered.\n * @returns {void}\n */ function $2364cb84e6b6548c$var$refresh(btn, element) {\n    if (btn) {\n        btn.disabled = false; // Re-enable the button after fetching advice\n        element?.classList.add('hidden'); // Hide the canvas after advice is fetched\n    }\n}\n$2364cb84e6b6548c$var$App();\n\n})();\n//# sourceMappingURL=index.d4cd3cc2.js.map\n","/**\n * The function initializes the application by selecting the elements from the DOM.\n * @returns {void}\n */\nfunction App() {\n  // Get the canvas element from the DOM\n  const element = /**@type {HTMLCanvasElement | null}*/ (\n    document.querySelector('canvas')\n  );\n  // Get the button element from the DOM\n  const btn = /**@type {HTMLButtonElement | null} */ (\n    document.querySelector('button')\n  );\n\n  const adviceContainer = /**@type {HTMLDivElement | null}*/ (\n    document.querySelector('.advice-container')\n  );\n\n  //The constants used in the Zdog library\n  // These constants are used to define the number of faces on the dice\n  const FOUR = 4;\n\n  window.addEventListener(\n    'DOMContentLoaded',\n    fetchAdvice.bind(null, element, btn, adviceContainer)\n  );\n\n  diceLoader(element, FOUR);\n\n  // When the button is clicked, it will generate a new piece of advice\n  btn?.addEventListener(\n    'click',\n    fetchAdvice.bind(null, element, btn, adviceContainer)\n  );\n}\n\n/**\n * The function initializes the Zdog dice loader with a canvas and a constant.\n * It sets up the Zdog illustration, anchor, group, and shapes to create a\n * 3D dice animation.\n * @param {HTMLCanvasElement | null} canvas - The canvas element where the Zdog illustration will be rendered.\n * @param {number} constant - A constant value used to define the number of faces on the dice.\n * @returns {void}\n */\nfunction diceLoader(canvas, constant) {\n  const { Anchor, Ellipse, Group, Illustration, Rect, TAU } = Zdog;\n  const illustration = new Illustration({\n    element: canvas\n  });\n  // anchor point used for the rotation\n  const dice = new Anchor({\n    addTo: illustration\n  });\n  // group describing the faces through rounded rectangles\n  const faces = new Group({\n    addTo: dice\n  });\n\n  // due to the considerable stroke, it is possible to fake the dice using four faces only\n  const face = new Rect({\n    addTo: faces,\n    color: 'hsl(150, 100%, 66%)',\n    height: 50,\n    stroke: 50,\n    translate: {\n      z: -25\n    },\n    width: 50\n  });\n\n  // rotate the faces around the center\n  face.copy({\n    rotate: {\n      x: TAU / constant\n    },\n    translate: {\n      y: 25\n    }\n  });\n\n  face.copy({\n    rotate: {\n      x: TAU / constant\n    },\n    translate: {\n      y: -25\n    }\n  });\n\n  face.copy({\n    translate: {\n      z: 25\n    }\n  });\n\n  // include the dots repeating as many shapes/groups as possible\n  // ! when copying an element be sure to reset the rotation/translation of the copied shape\n  const one = new Ellipse({\n    addTo: dice,\n    color: 'hsl(219, 22%, 16%)',\n    diameter: 15,\n    fill: true,\n    stroke: false,\n    translate: {\n      z: 50\n    }\n  });\n\n  const two = new Group({\n    addTo: dice,\n    rotate: {\n      x: TAU / constant\n    },\n    translate: {\n      y: 50\n    }\n  });\n\n  one.copy({\n    addTo: two,\n    translate: {\n      y: 20\n    }\n  });\n\n  one.copy({\n    addTo: two,\n    translate: {\n      y: -20\n    }\n  });\n\n  const three = new Group({\n    addTo: dice,\n    rotate: {\n      y: TAU / constant\n    },\n    translate: {\n      x: 50\n    }\n  });\n\n  one.copy({\n    addTo: three,\n    translate: {\n      z: 0\n    }\n  });\n\n  one.copy({\n    addTo: three,\n    translate: {\n      x: 20,\n      y: -20,\n      z: 0\n    }\n  });\n\n  one.copy({\n    addTo: three,\n    translate: {\n      x: -20,\n      y: 20,\n      z: 0\n    }\n  });\n\n  const four = new Group({\n    addTo: dice,\n    rotate: {\n      y: TAU / constant\n    },\n    translate: {\n      x: -50\n    }\n  });\n\n  two.copyGraph({\n    addTo: four,\n    rotate: {\n      x: 0\n    },\n    translate: {\n      x: 20,\n      y: 0\n    }\n  });\n\n  two.copyGraph({\n    addTo: four,\n    rotate: {\n      x: 0\n    },\n    translate: {\n      x: -20,\n      y: 0\n    }\n  });\n\n  const five = new Group({\n    addTo: dice,\n    rotate: {\n      x: TAU / constant\n    },\n    translate: {\n      y: -50\n    }\n  });\n\n  four.copyGraph({\n    addTo: five,\n    rotate: {\n      y: 0\n    },\n    translate: {\n      x: 0\n    }\n  });\n\n  one.copy({\n    addTo: five,\n    translate: {\n      z: 0\n    }\n  });\n\n  const six = new Group({\n    addTo: dice,\n    translate: {\n      z: -50\n    }\n  });\n\n  two.copyGraph({\n    addTo: six,\n    rotate: {\n      x: 0,\n      z: TAU / constant\n    },\n    translate: {\n      x: 0,\n      y: 0\n    }\n  });\n\n  four.copyGraph({\n    addTo: six,\n    rotate: {\n      y: 0\n    },\n    translate: {\n      x: 0\n    }\n  });\n\n  /**\n   * This function animates the dice by updating the render graph and rotating the dice on its x and y axes.\n   * It uses requestAnimationFrame to create a smooth animation loop.\n   * @returns {void}\n   */\n  function animate() {\n    illustration.updateRenderGraph();\n    dice.rotate.x += 0.01;\n    dice.rotate.y -= 0.01;\n    requestAnimationFrame(animate);\n  }\n\n  animate();\n}\n/**\n * This function fetches advice from an API and updates the advice container with the new advice.\n * It also disables the button to prevent multiple clicks while the advice is being fetched.\n * @param {HTMLCanvasElement | null} element - The canvas element where the Zdog\n * @param {HTMLButtonElement | null} btn - The button element that triggers the advice fetch.\n * @param {HTMLDivElement | null} adviceContainer - The container where the advice will be displayed.\n * @returns {Promise<void>}\n */\nasync function fetchAdvice(element, btn, adviceContainer) {\n  if (adviceContainer && btn) {\n    adviceContainer.innerHTML = ``;\n    btn.disabled = true; // Disable the button while fetching advice\n  }\n  element?.classList.remove('hidden'); // Show the canvas\n\n  try {\n    const response = await fetch('https://api.adviceslip.com/advice');\n    if (!response.ok) {\n      throw new Error(`HTTP error: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    const advice = data.slip.advice;\n    const adviceId = data.slip.id;\n    // Update the advice container with the new advice\n    if (adviceContainer) {\n      adviceContainer.innerHTML = `\n        <h1 class=\"advice-id\">Advice #<span id=\"advice-id\">${adviceId}</span></h1>\n        <p class=\"advice-text\">\"${advice}\"</p>\n      `;\n    }\n    refresh(btn, element); // Refresh the Zdog illustration to reflect the new advice\n    // Hide the canvas after advice is fetched\n  } catch (error) {\n    console.error('Error fetching advice:', error);\n    if (adviceContainer) {\n      adviceContainer.innerHTML = `\n        <h1 class=\"advice-id\">Advance #<span id=\"advice-id\">😵</span></h1>\n        <p class=\"advice-text\">\"Check Your Internet Connection\"</p>\n      `;\n    }\n    refresh(btn, element); // Refresh the Zdog illustration to reflect the error state\n  }\n}\n\n/**\n * The function refreshes the button state and hides the canvas element after advice is fetched.\n * @param {HTMLButtonElement | null} btn - The button element that triggers the advice fetch.\n * @param {HTMLCanvasElement | null} element - The canvas element where the Zdog illustration is rendered.\n * @returns {void}\n */\nfunction refresh(btn, element) {\n  if (btn) {\n    btn.disabled = false; // Re-enable the button after fetching advice\n    element?.classList.add('hidden'); // Hide the canvas after advice is fetched\n  }\n}\n\nApp();\n"],"names":["$2364cb84e6b6548c$var$fetchAdvice","element","btn","adviceContainer","innerHTML","disabled","classList","remove","response","fetch","ok","Error","status","statusText","data","json","advice","slip","adviceId","id","$2364cb84e6b6548c$var$refresh","error","console","add","$2364cb84e6b6548c$var$App","document","querySelector","window","addEventListener","bind","$2364cb84e6b6548c$var$diceLoader","canvas","constant","Anchor","Ellipse","Group","Illustration","Rect","TAU","Zdog","illustration","dice","addTo","face","color","height","stroke","translate","z","width","copy","rotate","x","y","one","diameter","fill","two","three","four","copyGraph","five","six","animate","updateRenderGraph","requestAnimationFrame"],"version":3,"file":"index.d4cd3cc2.js.map"}